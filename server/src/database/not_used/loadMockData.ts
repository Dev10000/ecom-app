import fs from 'fs';
import { from, to } from 'pg-copy-streams';
import pool, { pool_test_db } from '../../config/database';
import zlib from 'zlib'





// CREATE EMPTY TABLE
const create_datafiniti_electronics = async () => {
  const query = `DROP TABLE IF EXISTS "datafiniti_electronics" cascade;
  CREATE TABLE "datafiniti_electronics"(
  "id" varchar,
  "asins" varchar,
  "brand" varchar,
  "categories" varchar,
  "colors" varchar,
  "dateAdded" varchar,
  "dateUpdated" varchar,
  "dimension" varchar,
  "ean" decimal,
  "imageURLs" varchar,
  "keys" varchar,
  "manufacturer" varchar,
  "manufacturerNumber" varchar,
  "name" varchar,
  "primaryCategories" varchar,
  "reviews_date" varchar,
  "reviews_dateSeen" varchar,
  "reviews_doRecommend" varchar,
  "reviews_numHelpful" varchar,
  "reviews_rating" varchar,
  "reviews_sourceURLs" varchar,
  "reviews_text" varchar,
  "reviews_title" varchar,
  "reviews_username" varchar,
  "source_urls" varchar,
  "upc" decimal,
  "weight" varchar
);`;

  const res = await pool_test_db.query(query);
  console.log(res);
  return res;
};





// CREATE OFFICE PRODUCTS TABLE
const create_office_products = async () => {
  const query = `DROP TABLE IF EXISTS "office_products" cascade;
  CREATE TABLE "office_products"(
  "id" int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "asin" varchar,
  "brand" varchar,
  "title" varchar,
  "description" varchar,
  "price" decimal,
  "categories" varchar,
  "image_url" varchar,
  "related" varchar,
  "sales_rank" varchar
);`;

  const res = await pool_test_db.query(query);
  console.log(res);
  return res;
};
//create_office_products();





// INSERT INTO OFFICE PRODUCTS TABLE
const insert_office_products = async () => {
  const query = `INSERT INTO office_products (asin, brand, title, description, price, categories, image_url, related, sales_rank)
  SELECT
  CAST (data -> 'asin' AS varchar),
  CAST (data -> 'brand' AS varchar),
  CAST (data -> 'title' AS varchar),
  CAST (data -> 'description' AS varchar),
  CAST (data -> 'price' AS decimal),
  CAST (data -> 'categories' AS varchar),
  CAST (data -> 'imUrl' AS varchar),
  CAST (data -> 'related' AS varchar),
  CAST (data -> 'salesRank' AS varchar)
  FROM office_products_jsonb;`;

  const res = await pool_test_db.query(query);
  console.log(res);
  return res;
};
insert_office_products();





// CREATE EMPTY OFFICE JSONB TABLE
const create_table_office_jsonb = async () => {
  const usersQuery = `DROP TABLE IF EXISTS "office_products_jsonb" cascade;
  CREATE TABLE "office_products_jsonb"(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
  data jsonb NOT NULL

);`;

  const res = await pool_test_db.query(usersQuery);
  console.log(res);
  return res;
};
//create_table_office_jsonb();





// CREATE EMPTY ELECTRONICS JSONB TABLE
const create_table_jsonb = async () => {
  const usersQuery = `DROP TABLE IF EXISTS "electronics_jsonb" cascade;
CREATE TABLE "electronics_jsonb"(
  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ingested_at timestamp DEFAULT CURRENT_TIMESTAMP,
  data jsonb NOT NULL

);`;

  const res = await pool_test_db.query(usersQuery);
  console.log(res);
  return res;
};





//CSV AND JSON IMPORT test_db
const import_csv = () => {
    const file_name = './USERS_MOCK_DATA.csv'
    const file_name2 = './DatafinitiElectronicsProductData.csv'
    const file_json = './output_strict.json'
    //const file_json = './output_strict.json'
    // connection using created pool
    pool_test_db.connect(function (err: any, client: any, done: any) {
        if (err) {
            console.log(`Can not connect to the DB${err}`);
        }
        const stream = client.query(from("COPY office_products_jsonb (data) FROM STDIN WITH ENCODING 'UTF8'")); // JSON QUERY
        // const stream = client.query(from("COPY datafiniti_electronics FROM STDIN WITH (FORMAT CSV, DELIMITER ',', HEADER, ENCODING 'UTF8', ESCAPE '\n')")); // CSV QUERY
        const fileStream = fs.createReadStream(file_json);
        //const unzip = zlib.createGunzip();
        //const fileStream = fileContent.pipe(unzip)

        fileStream.on('error', (err: any, _client: any) => {
            console.error('Unexpected error on idle client', err);
            process.exit(-1);
        });

        stream.on('error', (err: any, _client: any) => {
            console.error('Unexpected error on idle client', err);
            process.exit(-1);
        });

        stream.on('finish', done);
        fileStream.pipe(stream);
        // done()
    });
};
//import_csv();





//CSV EXPORT test_db
const export_csv = () => {
  const file_name = './USERS_MOCK_DATA.csv'
  const file_name2 = './DatafinitiElectronicsProductData.csv'
  const file_output = './csv_output.csv'
  // connection using created pool
  pool_test_db.connect(function (err: any, client: any, done: any) {
      if (err) {
          console.log(`Can not connect to the DB${err}`);
      }

      //const stream = client.query(to("COPY datafiniti_electronics(asins) FROM STDOUT WITH (FORMAT CSV, DELIMITER ',', HEADER, ENCODING 'UTF8', ESCAPE '\n')"))
      const stream = client.query(to('COPY datafiniti_electronics("asins", "brand", "categories", "colors", "dimension", "ean", "imageURLs", "manufacturer", "manufacturerNumber", "name", "primaryCategories", "reviews_date", "reviews_dateSeen", "reviews_doRecommend", "reviews_numHelpful", "reviews_rating", "reviews_text", "reviews_title", "reviews_username", "upc", "weight") TO STDOUT WITH CSV HEADER'))
      const fileStream = fs.createWriteStream(file_output);
      //const unzip = zlib.createGunzip();
      //const fileStream = fileContent.pipe(unzip)

      //fileStream.on('error', done)
      fileStream.on('error', (err: any, _client: any) => {
          console.error('Unexpected error on idle client', err);
          process.exit(-1);
      });

      stream.on('error', (err: any, _client: any) => {
          console.error('Unexpected error on idle client', err);
          process.exit(-1);
      });

      // stream.on('error', done)
      stream.on('finish', done);
      //stream.pipe(fileStream)
      stream.pipe(fileStream)
      
      // done()
  });
};
//export_csv();





// CROSS DATABASE QUERY dev_db <- test_db
// const load_users = async () => {
//     /** ************************************************************
//      * PostgreSQL Cross Database Queries using DBLink Extension
//      * This function uses the DBLink extension that needs to be
//      * installed to the postgres server source db (db you have made the connection)
//      ************************************************************* */

//     const query = `INSERT INTO users(email, password, first_name, last_name, address, city, country, postal_code, phone_number, created_at)
//     SELECT email, password, first_name, last_name, address, city, country, postal_code, phone_number, created_at
//     FROM dblink('dbname=test_db user=postgres password=G$oFt78$8qiZMBsbX!%!7HWVTwwU*s', 'select email, password, first_name, last_name, address, city, country, postal_code, phone_number, created_at from users')
//     AS DATA(email varchar, password varchar, first_name varchar, last_name varchar, address varchar, city varchar, country varchar, postal_code varchar, phone_number varchar, created_at varchar);`;

//     const res = await pool.query(query);
//     console.log(res);
//     return res;
// };





// CROSS DATABASE QUERY dev_db <- test_db
const load__product_specs = async () => {
    /** ************************************************************
     * PostgreSQL Cross Database Queries using DBLink Extension
     * This function uses the DBLink extension that needs to be
     * installed to the postgres server source db (db you have made the connection)
     ************************************************************* */

    const query = `INSERT INTO product_specs(product_id, product_options_id, value)
    SELECT DISTINCT ROW_NUMBER () OVER (ORDER BY product_id), 1, value
    FROM dblink('dbname=test_db user=postgres password=G$oFt78$8qiZMBsbX!%!7HWVTwwU*s', 'select uniq_id, product_specifications from products_flipkart')
    AS DATA(product_id varchar, value varchar);`;

    const res = await pool.query(query);
    console.log(res);
    return res;
};





// CROSS DATABASE QUERY dev_db <- test_db
const load__product_categories = async () => {
    /** ************************************************************
     * PostgreSQL Cross Database Queries using DBLink Extension
     * This function uses the DBLink extension that needs to be
     * installed to the postgres server source db
     * CREATE EXTENSION dblink;
     * HOW TO: http://www.dbrnd.com/2015/05/postgresql-cross-database-queries-using/
     * "The PostgreSQL protocol works like that you always connect to a specific database. If you need a different database, you have to make a new connection."
     * COPY DATABASE: https://www.geeksforgeeks.org/postgresql-copy-database/
     * https://github.com/vitaly-t/pg-promise/wiki/Data-Imports
     * Joining data from multiple Postgres databases link:
     * https://www.cybertec-postgresql.com/en/joining-data-from-multiple-postgres-databases/
     * https://www.codeproject.com/Questions/1020013/how-to-copy-table-one-database-to-another-database
     ************************************************************* */

    const query = `INSERT INTO product_categories(title, slug)
  SELECT DISTINCT title AS title, (SELECT title)
  FROM dblink('dbname=test_db user=postgres password=G$oFt78$8qiZMBsbX!%!7HWVTwwU*s', 'select product_category_tree from products_flipkart')
  AS DATA(title varchar);`;

    const res = await pool.query(query);
    console.log(res);
    return res;
};






const setup_tim = (): void => {
    console.log('Starting database structuring tim');
    //create_users_table();
    // load_users_csv();
};
// setup_tim();





// load__product_categories();
// load__product_specs();
// load_users();
// create_product_categories_table
// pool shutdown

//create_datafiniti_electronics();



pool_test_db.end();
pool.end();
